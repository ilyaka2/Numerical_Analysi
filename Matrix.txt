import numpy as np


def reverse_matrix(matrix):
    """
        This function does the Gauss-Jordan elimination process to find the inverse of a matrix
        using identity matrix [1,0,0][0,1,0][0,0,1]

        Parameters:
        matrix (np.array): The matrix to be inverted.

        Returns:
        identity_matrix(after the inverse): The inverted matrix or if the matrix is not square,print.
        """

    rows, columns = matrix.shape
    if rows != columns:
        print("Only square matrices can be inverted.")
        exit(1)

    # Create an identity matrix of the same size
    identity_matrix = np.eye(rows)

    # Perform Gauss-Jordan elimination
    for i in range(rows):
        if np.isclose(matrix[i, i], 0):
            for k in range(i + 1, rows):
                if not np.isclose(matrix[k, i], 0):
                    matrix[[i, k]] = matrix[[k, i]]
                    identity_matrix[[i, k]] = identity_matrix[[k, i]]
                    break


        # Normalize the pivot row
        pivot = matrix[i, i]
        matrix[i] = matrix[i] / pivot
        identity_matrix[i] = identity_matrix[i] / pivot

        # Eliminate the current column in other rows
        for j in range(rows):
            if i != j:
                factor = matrix[j, i]
                matrix[j] = matrix[j] - factor * matrix[i]
                identity_matrix[j] = identity_matrix[j] - factor * identity_matrix[i]

    return identity_matrix

def norma_sum(matrix):
    """
        This function calculates the norm of a given matrix, which is the maximum absolute row sum.

        Parameters:
        matrix (np.array): The matrix to calculate the norm for.

        Returns:
        float: The norm of the matrix.
    """
    r,c = matrix.shape
    sumOFraw = 0
    tempsum = 0
    for i in range(r):
        for j in range(c):
            x = abs(matrix[i,j])
            tempsum = tempsum + x
        if(tempsum > sumOFraw):
            sumOFraw = tempsum
        tempsum = 0

    return sumOFraw



def cond_culc(matrix):
    """
        This function calculates the condition number of a matrix using the norm.

        Parameters:
        matrix (np.array): The matrix to calculate the condition number for.

        Returns:
        float: The condition number of the matrix.
    """
    tempMatrix = np.array(matrix)
    normaMatrix = norma_sum(tempMatrix)
    inverseMatrix = np.array(reverse_matrix(tempMatrix))
    normaInverseMatrix = norma_sum(inverseMatrix)
    return normaMatrix * normaInverseMatrix





#MAIN#
matrix = np.array([[1, -1, -2], [2, -3, -5], [-1, 3, 5]])
temp_matrix =np.array(matrix)
inverse_matrix = np.array(reverse_matrix(temp_matrix))
print("Original matrix: \n", matrix)
print("Inverse matrix:\n", inverse_matrix)
print("Original matrix NORM: ", norma_sum(matrix))
print("Inverse matrix NORM: ", norma_sum(inverse_matrix))
print("COND = ", norma_sum(matrix), "*", norma_sum(inverse_matrix), "= ", cond_culc(matrix))






